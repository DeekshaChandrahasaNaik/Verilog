`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 28.08.2025 21:33:43
// Design Name: 
// Module Name: fifo
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module fifo #( parameter WIDTH=8,parameter DEPTH=8)(
input i_clk, i_rst, i_ren, i_wen,
input [WIDTH-1:0]i_write_data,
output reg [WIDTH-1:0]o_read_data,
output full,empty
    );
    reg [WIDTH-1:0] mem [0:DEPTH-1];
    reg [$clog2(DEPTH):0] wr_ptr = 0;
    reg [$clog2(DEPTH):0] rd_ptr = 0; 
    
    assign full  = ({~wr_ptr[$clog2(DEPTH)],wr_ptr[$clog2(DEPTH)-1:0]} == rd_ptr[$clog2(DEPTH):0]);
    assign empty = (wr_ptr[$clog2(DEPTH):0] == rd_ptr[$clog2(DEPTH):0]);
    
    //write logic
    always @(posedge i_clk)
    begin
      if(i_rst) 
        wr_ptr <= 0;
      else if(i_wen && !full) begin
        mem[wr_ptr] <= i_write_data;
        wr_ptr <= (wr_ptr + 1);
      end
    end
    
      // Read operation
    always @(posedge i_clk) begin
        if (i_rst) begin
            rd_ptr <= 0;
            o_read_data  <= 0;
        end else if (i_ren && !empty) begin
            o_read_data <= mem[rd_ptr];
            rd_ptr <= (rd_ptr + 1);
        end
    end
        
endmodule