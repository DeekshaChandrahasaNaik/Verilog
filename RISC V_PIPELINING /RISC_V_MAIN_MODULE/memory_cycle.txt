`timescale 1ns / 1ps

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////Data memory/////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
module data_memory(A, WD, i_clk, WE, RD);
    //input and output declarations
    input [31:0] A, WD;
    input i_clk, WE;
    output [31:0]RD;
    
    // data memory
    reg [31:0] data [1023:0];
    
    // read logic 
    assign RD = (WE == 1'b0) ? data[A] : 32'h00000000;
    
    //write logic
    always @(posedge i_clk)
        begin
            if(WE)
                data[A] <= WD;
        end
initial begin 
data[7]=2;
end 
endmodule

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////memory cycle////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
module memory_cycle(i_clk, i_rst, PCSrcE, PCTargetE, RegWriteM, ResultSrcM, MemwriteM, ALUResultM, WriteDataM, RdM, PCPlus4M,
                    RegWriteW, ResultSrcW, ALUResultW, ReaddataW, PCPlus4W, RdW);
// input output declarations
    input i_clk, i_rst;
    input PCSrcE, RegWriteM, ResultSrcM, MemwriteM;
    input [31:0]PCTargetE, ALUResultM; 
    input [31:0]WriteDataM, PCPlus4M;
    input [4:0]RdM;
    output RegWriteW, ResultSrcW; 
    output [31:0]ALUResultW, ReaddataW, PCPlus4W;
    output [4:0]RdW;
    
    //declaring internal wires
    wire [31:0]ReaddataM;
    
    //declarations of internal reg
    reg RegWriteM_r, ResultSrcM_r; 
    reg [31:0]ALUResultM_r, ReaddataM_r, PCPlus4M_r;
    reg [4:0]RdM_r;
    //module instatiations
    
    /////////////////////////////////data memory instatiation////////////////////////////////
    data_memory data_memory(
    .A(ALUResultM), 
    .WD(WriteDataM), 
    .i_clk(i_clk), 
    .WE(MemwriteM), 
    .RD(ReaddataM)
    );
    
    always @(posedge i_clk or negedge i_rst)
        begin
            if(i_rst == 1'b0)
                begin
                    RegWriteM_r <= 1'b0;
                    ResultSrcM_r <= 1'b0;
                    ALUResultM_r <= 32'h00000000;
                    ReaddataM_r <= 32'h00000000;
                    RdM_r <= 5'h00;
                    PCPlus4M_r <= 32'h00000000;
                end
            else
                begin
                    RegWriteM_r <= RegWriteM;
                    ResultSrcM_r <= ResultSrcM;
                    ALUResultM_r <= ALUResultM;
                    ReaddataM_r <= ReaddataM;
                    RdM_r <= RdM;
                    PCPlus4M_r <= PCPlus4M;
                end 
        end 
        
     //output declarations
     assign RegWriteW = RegWriteM_r;
     assign ResultSrcW = ResultSrcM_r;
     assign ALUResultW = ALUResultM_r;
     assign ReaddataW = ReaddataM_r;
     assign RdW = RdM_r;
     assign PCPlus4W = PCPlus4M_r;

endmodule
