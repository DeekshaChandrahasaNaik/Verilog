`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10.09.2025 14:00:06
// Design Name: 
// Module Name: Decode_cycle
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
/*
//////////////////////////////////////////////////////////////////////////////////
/////////////////Main decoder//////////////////////
//////////////////////////////////////////////////////////////////
*/
module Main_decoder(op, ResultSrc, Memwrite, ALUSrc, branch, ImmSrc, Regwrite, ALUOp);
    //input and output declaration
    input [6:0]op;
    output branch;
    output ResultSrc, Memwrite, ALUSrc, Regwrite;
    output [1:0]ALUOp, ImmSrc;

    // logic
    assign Regwrite = (op == 7'b0000011 || op == 7'b0110011) ? 1'b1: 1'b0;
    assign ALUSrc = (op == 7'b0000011 || op == 7'b0100011) ? 1'b1: 1'b0;
    assign Memwrite = (op == 7'b0100011) ? 1'b1: 1'b0;
    assign ResultSrc = (op == 7'b0000011) ? 1'b1: 1'b0;
    assign branch = (op == 7'b1100011) ? 1'b1: 1'b0;
    assign ImmSrc = (op == 7'b0000011) ? 2'b00:
                    (op == 7'b0100011) ? 2'b01:
                    (op == 7'b1100011) ? 2'b10:
                    2'b00;
    assign ALUOp =  (op == 7'b0110011) ? 2'b10:
                    (op == 7'b1100011) ? 2'b01:
                    2'b00;
endmodule

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////ALU decoder file////////////////////////////
/////////////////////////////////////////////////////////////////////////////
module ALU_decoder(func3, ALUOp, op, func7, ALUControl );
//input port declaration
    input [2:0]func3;
    input [1:0]ALUOp;
    input op;
    input func7;
    output [2:0]ALUControl;
    //internal wire 
    wire [1:0]func7_op;
    //logic
    assign func7_op = {op , func7};
    
    assign ALUControl = (ALUOp == 2'b00) ? 3'b000:
                        (ALUOp == 2'b01) ? 3'b001:
                        ((ALUOp == 2'b10) & (func3 == 3'b010)) ? 3'b101:
                        ((ALUOp == 2'b10) & (func3 == 3'b110)) ? 3'b011:
                        ((ALUOp == 2'b10) & (func3 == 3'b111)) ? 3'b010:
                        ((ALUOp == 2'b10) & (func3 == 3'b000) & (func7_op == 2'b11)) ? 3'b001:
                        ((ALUOp == 2'b10) & (func3 == 3'b000) & (func7_op != 2'b11)) ? 3'b000:
                        3'b000;
endmodule

//////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////ALU control unit///////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
module control_unit(op, func7, func3, ResultSrc, Memwrite, ALUSrc, ImmSrc, Regwrite, branch, ALUControl);
 //input and output port declarations
 input [6:0] op, func7;
 input [2:0] func3;
 output ResultSrc, Memwrite, ALUSrc, Regwrite, branch;
 output [1:0] ImmSrc;
 output [2:0]ALUControl;
 
 //wire declarations
 wire [1:0]ALUOp;
 
 //module instatiations
 //main decoder
 Main_decoder Main_decoder(
 .op(op), 
 .ResultSrc(ResultSrc), 
 .Memwrite(Memwrite), 
 .ALUSrc(ALUSrc), 
 .ImmSrc(ImmSrc), 
 .Regwrite(Regwrite), 
 .branch(branch), 
 .ALUOp(ALUOp));
 //alu decoder
 ALU_decoder ALU_decoder(.func3(func3), .ALUOp(ALUOp), .op(op[5]), .func7(func7[5]), .ALUControl(ALUControl));

endmodule
//////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////Register file////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
module Reg_file(A1, A2, A3, RD1, RD2, WD3, i_clk, WE3, i_rst);
    //input and output declarations
    input [4:0]A1, A2, A3;
    input [31:0]WD3;
    output [31:0] RD1, RD2;
    input i_clk, WE3, i_rst;
    
    // register memory creations
    reg [31:0] register [31:0];
    
    //read oerations
    assign RD1 = (!i_rst) ? 32'h00000000 : register[A1];
    assign RD2 = (!i_rst) ? 32'h00000000 : register[A2];
    
    // write logic
    always @(posedge i_clk)
        begin
            if(WE3)
                begin
                    register[A3] <= WD3;
                end
        end   
initial begin 
register[0]=2;
register[5]=7;
register[6]=4;
end           
                    
endmodule


//////////////////////////////////////////////////////////////////////////
/////////////////////////////Extender/////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
module Extender(In, ImmExtD, ImmSrc);
    //input and output port declarations
    input [31:0]In;
    input [1:0]ImmSrc;
    output [31:0]ImmExtD;
    // logic

assign ImmExtD = (ImmSrc == 2'b00) ? {{20{In[31]}}, {In[31:20]}} :  // I-type
                 (ImmSrc == 2'b01) ? {{20{In[31]}}, {In[31:25]}, {In[11:7]}} : // S-type
                  32'b0; // U-type (or J-type later)
    
endmodule
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////main logic for decode cycle/////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
module Decode_cycle( i_clk, i_rst, RegWriteW, InstrD, PCD, PCPlus4D, RDW, ResultW, 
    RegWriteE, ResultSrcE, MemwriteE, BranchE, ALUcontrolE, ALUSrcE, RD1E, RD2E, PCE, RdE, ImmExtE, PCPlus4E
 );
    //input output declaratins
    input i_clk, i_rst, RegWriteW;
    input [31:0]InstrD, PCD, PCPlus4D;
    input [4:0]RDW;
    input [31:0]ResultW;
    output RegWriteE, ResultSrcE, MemwriteE, BranchE, ALUSrcE; 
    output [2:0]ALUcontrolE; 
    output [31:0]RD1E, RD2E, PCE, ImmExtE, PCPlus4E;
    output [4:0]RdE;
    //wire declarations
    wire RegWriteD, ALUSrcD, MemwriteD, ResultSrcD, BranchD;
    wire [1:0]ImmSrcD;
    wire [2:0]ALUcontrolD;
    wire [31:0]RD1_D, RD2_D;
    wire [31:0]ImmExtD;
    
    //register declarations
    reg RegWriteD_r, ALUSrcD_r, MemwriteD_r, ResultSrcD_r, BranchD_r;
    reg [2:0]ALUcontrolD_r;
    reg [31:0]RD1_D_r, RD2_D_r,ImmExtD_r;
    reg [4:0]RdD_r;
    reg [31:0]PCD_r, PCPlus4D_r;
    //module instatiations
    ////////Control units instatiation///////////
    control_unit control_unit(
    .op(InstrD[6:0]), 
    .func7(InstrD[31:25]), 
    .func3(InstrD[14:12]), 
    .ResultSrc(ResultSrcD), 
    .Memwrite(MemwriteD), 
    .ALUSrc(ALUSrcD), 
    .ImmSrc(ImmSrcD), 
    .Regwrite(RegWriteD), 
    .branch(BranchD), 
    .ALUControl(ALUcontrolD)
    );
    
    ////////////////////Register file///////////////////////
    Reg_file Reg_file(
    .A1((InstrD[19:15])), 
    .A2((InstrD[24:20])), 
    .A3(RDW), 
    .RD1(RD1_D), 
    .RD2(RD2_D), 
    .WD3(ResultW), 
    .i_clk(i_clk), 
    .WE3(RegWriteW), 
    .i_rst(i_rst)
    );
   
    ///////////////signextender//////////////////////////////
    Extender Ext(
    .In(InstrD), 
    .ImmExtD(ImmExtD), 
    .ImmSrc(ImmSrcD)
    );
    
    always @(posedge i_clk or negedge i_rst)
        begin
            if(i_rst==1'b0)
                begin
                    RegWriteD_r <= 1'b0; 
                    ALUSrcD_r <= 1'b0; 
                    MemwriteD_r <= 1'b0;
                    ResultSrcD_r <= 1'b0;
                    BranchD_r <= 1'b0;
                    ALUcontrolD_r <= 3'b000;
                    RdD_r <= 5'b00000;
                    RD1_D_r <= 32'h00000000; 
                    RD2_D_r <= 32'h00000000; 
                    ImmExtD_r <= 32'h00000000; 
                    PCD_r <= 32'h00000000;  
                    PCPlus4D_r <= 32'h00000000; 
                end 
                
             else
                begin
                    RegWriteD_r <= RegWriteD; 
                    ALUSrcD_r <=  ALUSrcD; 
                    MemwriteD_r <= MemwriteD;
                    ResultSrcD_r <= ResultSrcD;
                    BranchD_r <= BranchD;
                    ALUcontrolD_r <= ALUcontrolD;
                    RdD_r <= InstrD[11:7];
                    RD1_D_r <= RD1_D; 
                    RD2_D_r <= RD2_D; 
                    ImmExtD_r <= ImmExtD; 
                    PCD_r <= PCD;  
                    PCPlus4D_r <= PCPlus4D;
                end 
           end 
    
    //output assign statements
    assign RegWriteE = RegWriteD_r;
    assign ResultSrcE = ResultSrcD_r;
    assign MemwriteE = MemwriteD_r;
    assign BranchE = BranchD_r;
    assign ALUcontrolE = ALUcontrolD_r;
    assign ALUSrcE = ALUSrcD_r;
    assign RD1E = RD1_D_r;
    assign RD2E = RD2_D_r;
    assign PCE = PCD_r;
    assign RdE = RdD_r;
    assign ImmExtE = ImmExtD_r;
    assign PCPlus4E = PCPlus4D_r;
endmodule
